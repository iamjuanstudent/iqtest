/*
	A harness for iqtest

	Uses options on the TestGroup:
	groupTemplate: {name} = group name
	testTemplate: {name} = test name, {desc} = simple failure description
	itemTemplate: {fulltext} 

*/
(function(b){var e=b.impl.utility,c,d={group:'<pre><h1>Starting test group "<iq-name></iq-name>": <iq-groupresult></iq-groupresult></h1><div><div></div></div></pre>',testStart:'<h2>Starting test "<iq-name></iq-name>": <iq-testresult></iq-testresult></h2>',testEnd:"<h3><iq-count></iq-count> tests run; <iq-countPassed></iq-countPassed> passed; <iq-countFailed></iq-countFailed> failed.</h3>",itemStart:'<span>Running test #<iq-count></iq-count>: <iq-assertFuncName></iq-assertFuncName> "<iq-desc></iq-desc>"</span>',itemEnd:"<span><iq-fulltext></iq-fulltext></span><br/>",resultSuccess:'<span style="color:green"><iq-resulttext></iq-resulttext></span>',resultFail:'<span style="color:red"><iq-resulttext></iq-resulttext></span>'};
b.templates=d;c=b.impl.TestGroup.prototype.run;e.tmpReplace=function(f,g){e.each(g,function(j,h){if(typeof h==="string"||typeof h==="number"){var k=f.find("iq-"+j.toLowerCase());
k.replaceWith(e.format("<span>{0}</span>",h));}});return f;};function a(f){var g=f?d.resultSuccess:d.resultFail;
return e.tmpReplace($(g),{resulttext:f?"Passed":"Failed"});}b.impl.TestGroup.prototype.run=function(){var f=$("#wrap");
f.empty();c.call(this).then(function(g){e.newChain(function(){g.group.render(f);});
});};b.impl.TestGroup.prototype.writer=function(f){var g=$(f);g.empty();this.outputTarget=g;
this.groupStart=function(h){var i=e.tmpReplace($(d.group).clone(),h);this.outputTarget.append(i);
this.groupTarget=i;this.testTarget=i.find("div:only-child:last");};this.groupEnd=function(h){var i=a(h.passed);
this.groupTarget.find("iq-groupresult").replaceWith(i);};this.testStart=function(i){var h=e.tmpReplace($(d.testStart).clone(),i);
this.testTarget.append(h);};this.testEnd=function(j){var i,h=e.tmpReplace($(d.testEnd).clone(),j);
this.testTarget.append(h);i=a(j.passed);this.testTarget.find("iq-testresult").replaceWith(i);
};this.itemStart=function(i){var h=e.tmpReplace($(d.itemStart),i);this.itemTarget=h;
this.testTarget.append(h);};this.itemEnd=function(h){if(h.passed){this.itemTarget.remove();
}else{this.itemTarget.replaceWith(e.tmpReplace($(d.itemEnd).clone(),h));}h.written=true;
};return this;};b.impl.TestGroup.prototype.render=function(f){this.outputTarget=f;
e.each(this.tests,function(g,h){h.render();});};b.impl.Test.prototype.render=function(){var f=this;
e.each(f.results,function(g,h){if(!h.written){e.event(this.group.itemEnd,this.group,h);
}});};b.writer=function(f){var g=new b.impl.TestGroup();g.writer(f);return g;};b.impl.apiroot.writer=b.writer;
}(iqtest));