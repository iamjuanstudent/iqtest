/*
Assertions for IQ Test (other than buster)
This doesn't actually require iqtest, so it can be included before or after.
 */
(function(a){a(function(b){var d=b.impl.utility,c=d.formatAssert;return{contentsEqual:function(h,e,m){var o,k,l=d.isArray(e),f=e,i=h;
function n(q){var p=[];d.each(q,function(s,r){p.push(r);});return p;}function g(q,r){for(var p=0;
p<q.length;p++){if(q[p]!==r[p]){return p;}}return -1;}function j(r,q){var p=0;d.each(r,function(t,s){if(p===q){return t;
}});}d.expectOpts(2);if(typeof e!==typeof h){o=d.format("the objects are {not}different types (expected is {0}, actual is {1})",typeof h,typeof e);
}else{if(d.isString(e)){f=d.split(e,",");i=d.split(h,",");}else{if(typeof e==="object"){if(l){f.sort();
i.sort();}else{f=n(e);i=n(h);}if(f.length!==i.length){o=d.format("the objects are {not}different lengths, expected {0} and was {1}",i.length,f.length);
}else{k=g(f,i);if(k>=0){if(!l){k='"'+j(e,k)+'"';}o=d.format('sorted objects are {not}different at element {0}, expected "{1}" vs. actual "{2}"',k,i[k],f[k]);
}}}else{o=d.format('are of type "{3}"" which is {not}not a container',typeof e);}}}return{passed:!o,err:c(m,o)};
}};});}(typeof define==="function"?define:function(a){if(typeof module!=="undefined"){module.exports=a(require("./iqtest"));
}else{this.iqtest_assertions.push(a(this.iqtest));}}));