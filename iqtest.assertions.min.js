/*
Assertions for IQ Test (other than buster)
This requires iqtest to use its utility methods so must be included afterwards

Each assertion should throw an error when called with no args: "Expected 1 argument[s]"
This is necessary for iqtest to determine the position of the "message" argument
 */
(function(a){a(function(c){var f=c.impl.utility,d=f.formatAssert;function h(j,i){if(j===i){return true;
}else{if(typeof j!==typeof i){return false;}else{if(!f.isValueType(j)){return true;
}}}}function e(l,i,n,m){var o="",k=0,j=0;if(typeof l!=="object"||typeof i!=="object"){o=f.format("the objects are not both objects");
}else{f.each(l,function(q,p){if(typeof i[q]==="undefined"){o=f.format('the expected object has a property "{0}"" which does not exist on the actual object',q);
return false;}if(m?!h(i[q],l[q]):i[q]!==l[q]){o=f.format('the expected object property "{0}" has value "{1}" which does not match the actual value "{2}"',q,l[q],i[q]);
return false;}k++;});if(!o){f.each(i,function(){j++;});if(k!=j){o=f.format("the expected object has {0} properties, the actual has {1}",k,j);
}}}return{passed:!o,err:d(n,o)};}function b(l,i,q){var s,r,o,p=f.isArray(i),j=i,m=l;
function k(u,v){for(var t=0;t<u.length;t++){if(u[t]!==v[t]){return t;}}return -1;
}function n(v,u){var t=0;f.each(v,function(x,w){if(t===u){return x;}});}f.expectOpts(arguments,2);
if(typeof i!==typeof l){r=f.format("the objects are {not}different types (expected is {0}, actual is {1})",typeof l,typeof i);
}else{if(f.isString(i)){j=f.split(i,",");m=f.split(l,",");p=true;}else{if(typeof i!=="object"){r=f.format('are of type "{3}" which is {not}not a container',typeof i);
}}}if(!r){if(p){j.sort();m.sort();if(j.length!==m.length){r=f.format("the objects are {not}different lengths, expected {0} and was {1}",m.length,j.length);
}else{o=k(j,m);if(o>=0){if(!p){o='"'+n(i,o)+'"';}r=f.format('sorted objects are {not}different at element {0}, expected "{1}" vs. actual "{2}"',o,m[o],j[o]);
}}}else{s=e(l,i,q);}}return s||{passed:!r,err:d(q,r)};}function g(j,i,k){f.expectOpts(arguments,2);
return e(j,i,k,true);}return{collectionEquals:b,propertyEquals:e,propertyValueEquals:g};
});}(typeof define==="function"?define:function(a){if(typeof module!=="undefined"){module.exports=a(require("./iqtest"));
}else{this.iqtest_assertions.push(a(this.iqtest));}}));